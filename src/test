import { useEffect, useRef, useState } from 'react';

import SpotifyWebApi from 'spotify-web-api-node';
import './App.css';
import reactLogo from './assets/react.svg';
// import User from './User';

import credentials from '../public/credentials.json';
{
	type: 'JSON';
}

const CLIENT_ID = credentials.clientId;
const CLIENT_SECRET = credentials.clientSecret;
const REDIRECT_URI = credentials.redirectUri;
const AUTH_ENDPOINT = 'https://accounts.spotify.com/authorize';
const RESPONSE_TYPE = 'code';

var logged = false;

const SCOPES = 'playlist-read-private%20user-read-private%20user-read-email';

const spotifyApi = new SpotifyWebApi({
	redirectUri: REDIRECT_URI,
	clientId: CLIENT_ID,
});

const scopes = ['user-read-private', 'user-read-email'];
const state = 'some-state-of-my-choice';

function App() {
	const [logged_out_status, setLogoutStatus] = useState(false);
	const user_details = useRef(null);
	const [user_info, setInfo] = useState();
	const current_playlist = useRef(null);
	const [saved_playlists, setPlaylists] = useState([]);
	const [list_offset, setOffset] = useState(0);

	useEffect(() => {
		console.log('loading with logged out status: ' + logged_out_status);
		if (!logged_out_status) {
			console.log(authorize_url());
			const hash = window.location.hash;
			let token = window.localStorage.getItem('token');
			if (!token && hash) {
				token = hash
					.substring(1)
					.split('&')
					.find((elem) => elem.startsWith('access_token'))
					.split('=')[1];

				window.localStorage.setItem('token', token);
			}
			spotifyApi.setAccessToken(token);
			console.log('Token = ' + spotifyApi.getAccessToken());
			document.title = 'Logged In';
		}
	}, []);

	const authorize_url = () => {
		return `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&scopes=playlist-read-private&response_type=${RESPONSE_TYPE}&state=a`;
	};
	function getUser() {
		console.log('Get user:');
		spotifyApi.getMe().then(
			function (data) {
				user_details.current = data.body;
				console.log(user_details.current);
				setInfo(user_details.current);
			},
			function (err) {
				console.log('Something went wrong!', err);
			}
		);
	}

	function play(lim, off) {
		spotifyApi
			.getUserPlaylists({
				limit: lim,
				offset: off,
			})
			.then(
				function (data) {
					current_playlist.current = data.body.items;
					console.log('%c API says: ', 'color:red');

					console.log(current_playlist.current);
				},
				function (err) {
					console.log('Something went wrong!', err);
				}
			)
			.then((data) => {
				let new_list = saved_playlists;
				let private_only = [];
				current_playlist.current.forEach((e) => {
					if (e.public) {
						private_only.push(e);
					}
				});
				console.log(private_only);
				new_list.push(current_playlist.current);
				setPlaylists(current_playlist.current);
			});
	}
	function getPlaylists() {
		let count = 10;
		console.log(list_offset + count);

		console.log('Get playlists:');
		play(count, list_offset);

		console.log('%c saved_playlists says: ', 'color:yellow');
		console.log(saved_playlists);
		setOffset(list_offset + count);
	}

	const logout = () => {
		console.log(spotifyApi.getRefreshToken());
		setLogoutStatus(true);
		console.log('Token = ' + spotifyApi.setAccessToken(''));
		console.log(logged_out_status);
		window.localStorage.removeItem('token');
		window.location.hash = '';
		setInfo();
		setPlaylists([]);
		document.title = 'Logged Out';
		spotifyApi.setAccessToken(spotifyApi.getRefreshToken());
	};

	const login = () => {
		console.log('Logging in...');
		setLogoutStatus(true);
	};

	const printPlayLists = saved_playlists.map((e) => (
		<p key={e.name}>
			{e.name} <a href={e.external_urls.spotify}>{e.external_urls.spotify}</a>
		</p>
	));

	return (
		<div className="App">
			{!logged_out_status ? (
				<button onClick={logout}>logout</button>
			) : (
				<a href={authorize_url()}>
					<button onClick={login}>{authorize_url()}</button>
					{/* <User /> */}
					{/* <a href={authorize_url()}>login</a> */}
				</a>
			)}
			{!user_info && !logged_out_status ? (
				<div>
					<button onClick={getUser}>Get User</button>
				</div>
			) : (
				<div>
					{user_info ? (
						<>
							<h2>{user_info.display_name}</h2>
							<h3>{user_info.id}</h3>
							<button onClick={getPlaylists}>Get playlists</button>
						</>
					) : (
						'Login first'
					)}
				</div>
			)}
			<div>{saved_playlists ? printPlayLists : ''}</div>
		</div>
	);
}

export default App;
