import { useEffect, useState } from 'react';
import SpotifyWebApi, { createAuthorizeURL } from 'spotify-web-api-node';
import './App.css';
import reactLogo from './assets/react.svg';
import User from './User';

import credentials from '../public/credentials.json';
{
	type: 'JSON';
}

const CLIENT_ID = credentials.clientId;
const REDIRECT_URI = credentials.redirectUri;
const AUTH_ENDPOINT = 'https://accounts.spotify.com/authorize';
const RESPONSE_TYPE = 'token';

var logged = false;

const SCOPES = 'user-read-private';

const spotifyApi = new SpotifyWebApi({
	redirectUri: REDIRECT_URI,
	clientId: CLIENT_ID,
});

function App() {
	const [login_status, setLogoutStatus] = useState(false);

	useEffect(() => {
		console.log('loading with logged out status: ' + login_status);
		if (!login_status) {
			const hash = window.location.hash;
			let token = window.localStorage.getItem('token');
			if (!token && hash) {
				token = hash
					.substring(1)
					.split('&')
					.find((elem) => elem.startsWith('access_token'))
					.split('=')[1];

				window.localStorage.setItem('token', token);
			}
			spotifyApi.setAccessToken(token);
			console.log('Token = ' + spotifyApi.getAccessToken());
			document.title = 'Logged In';
		}
	}, [login_status]);

	const authorize_url = () => {
		return `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&scopes=${SCOPES}&response_type=${RESPONSE_TYPE}`;
	};
	function getUser(props) {
		props.getMe().then(
			function (data) {
				console.log('Some information about the authenticated user', data.body);
			},
			function (err) {
				console.log('Something went wrong!', err);
			}
		);
	}
	const logout = () => {
		setLogoutStatus(true);
		console.log('Token = ' + spotifyApi.setAccessToken(''));
		console.log(login_status);
		window.localStorage.removeItem('token');
		window.location.hash = '';
		document.title = 'Logged Out';
	};

	const login = () => {
		console.log('Logging in...');
		setLogoutStatus(true);
	};

	return (
		<div className="App">
			{!login_status ? (
				<>
					<button onClick={logout}>logout</button>
					<button onClick={getUser(spotifyApi)}>User</button>
				</>
			) : (
				<a href={authorize_url()}>
					<button onClick={login}>login</button>
					<User />
					{/* <a href={authorize_url()}>login</a> */}
				</a>
			)}
		</div>
	);
}

export default App;
